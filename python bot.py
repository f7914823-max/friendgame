import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import json
import os

# –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
TOKEN = "8401872579:AAELPVJQyDTIErFg-M-UsxSV2wFCzQbno6U"

# URL —Ç–≤–æ–µ–≥–æ Mini App (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ—Å–ª–µ —Ö–æ—Å—Ç–∏–Ω–≥–∞)
MINI_APP_URL = "https://—Ç–≤–æ–π-username.github.io/gamefriend-miniapp/"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∞–∫–∫–∞—É–Ω—Ç—ã, –¥—Ä—É–∑—å—è)
DATA_FILE = "gamefriend_data.json"


# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    return {"users": {}, "friend_requests": {}, "game_invites": {}}


def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f)


data = load_data()
bot = Bot(token=TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑_—é–∑–µ—Ä–Ω–µ–π–º–∞"

    if user_id not in data["users"]:
        data["users"][user_id] = {
            "username": username,
            "balance": 1000,  # –ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
            "friends": []
        }
        save_data(data)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å —Å –¥—Ä—É–∑—å—è–º–∏", web_app=types.WebAppInfo(url=MINI_APP_URL))],
        [InlineKeyboardButton(text="üë• –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="add_friend")],
        [InlineKeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
    ])

    await message.answer(
        f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GameFriend, {username}!\n"
        "–ò–≥—Ä–∞–π —Å –¥—Ä—É–∑—å—è–º–∏ –Ω–∞ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É!\n"
        "–î–æ–±–∞–≤—å –¥—Ä—É–∑–µ–π –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –≤ –±–∏—Ç–≤—ã. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {data['users'][user_id]['balance']} üí∞",
        reply_markup=keyboard
    )


@dp.callback_query(lambda c: c.data == "profile")
async def profile_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = data["users"][user_id]
    friends_count = len(user["friends"])

    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await callback.message.edit_text(
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å @{user['username']}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']}\n"
        f"üë´ –î—Ä—É–∑–µ–π: {friends_count}\n"
        f"–ò–≥—Ä–∞–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –≤–∞–ª—é—Ç—É!",
        reply_markup=keyboard.as_markup()
    )


@dp.callback_query(lambda c: c.data == "add_friend")
async def add_friend_handler(callback: CallbackQuery):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ username, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî inline –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ username –¥—Ä—É–≥–∞", callback_data="input_username")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await callback.message.edit_text(
        "üë• –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞:\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤–≤–µ–¥–∏ username (–±–µ–∑ @).",
        reply_markup=keyboard
    )


@dp.message(lambda message: message.reply_to_message and message.reply_to_message.text == "–í–≤–µ–¥–∏ username –¥—Ä—É–≥–∞:")
async def process_username(message: types.Message):
    target_username = message.text.strip().replace('@', '')
    sender_id = message.from_user.id
    sender_username = data["users"][sender_id]["username"]

    # –ü–æ–∏—Å–∫ target_user –ø–æ username
    target_id = None
    for uid, u in data["users"].items():
        if u["username"].lower() == target_username.lower():
            target_id = uid
            break

    if not target_id:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –∑–∞–ø—É—Å–∫–∞–ª /start.")
        return

    if target_id == sender_id:
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è.")
        return

    if target_id in data["users"][sender_id]["friends"]:
        await message.answer("‚úÖ –í—ã —É–∂–µ –¥—Ä—É–∑—å—è!")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    data["friend_requests"][f"{sender_id}_{target_id}"] = {"from": sender_id, "to": target_id, "type": "friend"}
    save_data(data)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    await bot.send_message(
        target_id,
        f"ü§ù @{sender_username} –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Ç–µ–±–µ –¥—Ä—É–∂–∏—Ç—å!\n"
        f"–ü—Ä–∏–º–∏ –≤ Mini App –∏–ª–∏ –æ—Ç–≤–µ—Ç—å /accept_friend_{sender_id}"
    )

    await message.answer(f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω @{target_username}!")


@dp.message(Command("accept_friend_"))
async def accept_friend_handler(message: types.Message):
    parts = message.text.split('_')
    if len(parts) < 3:
        return
    sender_id = int(parts[2])
    user_id = message.from_user.id

    if f"{sender_id}_{user_id}" in data["friend_requests"]:
        del data["friend_requests"][f"{sender_id}_{user_id}"]
        data["users"][user_id]["friends"].append(sender_id)
        data["users"][sender_id]["friends"].append(user_id)
        save_data(data)

        sender_username = data["users"][sender_id]["username"]
        await message.answer(f"‚úÖ –¢—ã –ø—Ä–∏–Ω—è–ª –¥—Ä—É–∂–±—É —Å @{sender_username}!")

        await bot.send_message(sender_id, f"üéâ @{data['users'][user_id]['username']} –ø—Ä–∏–Ω—è–ª —Ç–≤–æ—é –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è!")


@dp.callback_query(lambda c: c.data == "invite_game")
async def invite_game_handler(callback: CallbackQuery):
    # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∏–≥—Ä—É (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –Ω–æ –¥–ª—è –∏–≥—Ä—ã)
    user_id = callback.from_user.id
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞, –Ω–æ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
    await callback.answer("üì¢ –û—Ç–ø—Ä–∞–≤—å /invite_game_@username_–æ–ø–∏—Å–∞–Ω–∏–µ_–∏–≥—Ä—ã", show_alert=True)


@dp.message(Command("invite_game_"))
async def process_game_invite(message: types.Message):
    parts = message.text.split('_', 3)
    if len(parts) < 4:
        await message.answer("–§–æ—Ä–º–∞—Ç: /invite_game_@username_–æ–ø–∏—Å–∞–Ω–∏–µ")
        return

    target_username = parts[1].replace('@', '')
    description = parts[3]
    sender_id = message.from_user.id
    sender_username = data["users"][sender_id]["username"]

    target_id = None
    for uid, u in data["users"].items():
        if u["username"].lower() == target_username.lower():
            target_id = uid
            break

    if not target_id:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    data["game_invites"][f"{sender_id}_{target_id}"] = {"from": sender_id, "to": target_id, "desc": description}
    save_data(data)

    await bot.send_message(
        target_id,
        f"üéÆ @{sender_username} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Ç–µ–±—è –≤ –∏–≥—Ä—É!\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"–ü—Ä–∏–º–∏: /accept_game_{sender_id}"
    )

    await message.answer(f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ @{target_username}!")


@dp.message(Command("accept_game_"))
async def accept_game_handler(message: types.Message):
    parts = message.text.split('_')
    if len(parts) < 3:
        return
    sender_id = int(parts[2])
    user_id = message.from_user.id

    if f"{sender_id}_{user_id}" in data["game_invites"]:
        invite = data["game_invites"].pop(f"{sender_id}_{user_id}")
        del data["game_invites"][f"{sender_id}_{user_id}"]
        save_data(data)

        sender_username = data["users"][sender_id]["username"]
        await message.answer(
            f"üöÄ –¢—ã –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç @{sender_username}!\n"
            f"–ó–∞–ø—É—Å—Ç–∏ Mini App –¥–ª—è –∏–≥—Ä—ã: üéÆ –ò–≥—Ä–∞—Ç—å —Å –¥—Ä—É–∑—å—è–º–∏",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å", web_app=types.WebAppInfo(url=MINI_APP_URL))]
            ])
        )

        await bot.send_message(sender_id,
                               f"‚úÖ @{data['users'][user_id]['username']} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ! –û–ø–∏—Å–∞–Ω–∏–µ: {invite['desc']}")


@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å —Å –¥—Ä—É–∑—å—è–º–∏", web_app=types.WebAppInfo(url=MINI_APP_URL))],
        [InlineKeyboardButton(text="üë• –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="add_friend")],
        [InlineKeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
    ])
    await callback.message.edit_text(
        f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {data['users'][user_id]['balance']} üí∞",
        reply_markup=keyboard
    )


@dp.message(Command("help"))
async def help_handler(message: types.Message):
    await message.answer(
        "/start ‚Äî –ó–∞–ø—É—Å–∫\n"
        "/profile ‚Äî –ü—Ä–æ—Ñ–∏–ª—å\n"
        "–î–ª—è –¥—Ä—É–∑–µ–π: –î–æ–±–∞–≤—å username –≤ Mini App –∏–ª–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n"
        "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!"
    )


async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())